package com.example.admin1.locationsharing.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.admin1.locationsharing.db.dao.Contacts;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACTS".
*/
public class ContactsDao extends AbstractDao<Contacts, Long> {

    public static final String TABLENAME = "CONTACTS";

    /**
     * Properties of entity Contacts.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property First_name = new Property(1, String.class, "first_name", false, "FIRST_NAME");
        public final static Property Last_name = new Property(2, String.class, "last_name", false, "LAST_NAME");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property Is_contact_added = new Property(4, Boolean.class, "is_contact_added", false, "IS_CONTACT_ADDED");
        public final static Property Is_location_requested = new Property(5, Boolean.class, "is_location_requested", false, "IS_LOCATION_REQUESTED");
        public final static Property Is_location_shared = new Property(6, Boolean.class, "is_location_shared", false, "IS_LOCATION_SHARED");
    };


    public ContactsDao(DaoConfig config) {
        super(config);
    }
    
    public ContactsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FIRST_NAME\" TEXT," + // 1: first_name
                "\"LAST_NAME\" TEXT," + // 2: last_name
                "\"PHONE\" TEXT," + // 3: phone
                "\"IS_CONTACT_ADDED\" INTEGER," + // 4: is_contact_added
                "\"IS_LOCATION_REQUESTED\" INTEGER," + // 5: is_location_requested
                "\"IS_LOCATION_SHARED\" INTEGER);"); // 6: is_location_shared
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACTS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Contacts entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String first_name = entity.getFirst_name();
        if (first_name != null) {
            stmt.bindString(2, first_name);
        }
 
        String last_name = entity.getLast_name();
        if (last_name != null) {
            stmt.bindString(3, last_name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        Boolean is_contact_added = entity.getIs_contact_added();
        if (is_contact_added != null) {
            stmt.bindLong(5, is_contact_added ? 1L: 0L);
        }
 
        Boolean is_location_requested = entity.getIs_location_requested();
        if (is_location_requested != null) {
            stmt.bindLong(6, is_location_requested ? 1L: 0L);
        }
 
        Boolean is_location_shared = entity.getIs_location_shared();
        if (is_location_shared != null) {
            stmt.bindLong(7, is_location_shared ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Contacts readEntity(Cursor cursor, int offset) {
        Contacts entity = new Contacts( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // first_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // last_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // is_contact_added
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // is_location_requested
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // is_location_shared
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Contacts entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFirst_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLast_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIs_contact_added(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setIs_location_requested(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setIs_location_shared(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Contacts entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Contacts entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
